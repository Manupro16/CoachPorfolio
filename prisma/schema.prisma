generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or your preferred database
  url      = env("DATABASE_URL")
}

// Add this field to the User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
}

enum Role {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ImageSource {
  URL
  UPLOAD
}

model EarlyLife {
  id          Int         @id
  imageSource ImageSource
  imageUrl    String? // URL of the image if imageSource is 'URL'
  imageData   Bytes? // Binary data of the image if imageSource is 'UPLOAD'
  imageType   String? // MIME type of the image if imageSource is 'UPLOAD'
  title       String
  content     String
  date        String
}

model PlayerCareer {
  id          Int         @id @default(autoincrement())
  imageSource ImageSource
  imageUrl    String? // URL of the image if imageSource is 'URL'
  imageData   Bytes? // Binary data of the image if imageSource is 'UPLOAD'
  imageType   String? // MIME type of the image if imageSource is 'UPLOAD'
  title       String
  content     String
  date        String
}

model CoachingCareer {
  id          Int         @id @default(autoincrement())
  imageSource ImageSource
  imageUrl    String? // URL of the image if imageSource is 'URL'
  imageData   Bytes? // Binary data of the image if imageSource is 'UPLOAD'
  imageType   String? // MIME type of the image if imageSource is 'UPLOAD'
  title       String
  content     String
  date        String
}
